<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Kevin's Black-Tech]]></title>
  <subtitle><![CDATA[Home's behind and the world ahead.]]></subtitle>
  <link href="//atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-04-13T05:29:03.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Li Kanwen]]></name>
    <email><![CDATA[likanwen@icloud.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Django Template的一些注意点]]></title>
    <link href="http://yoursite.com/2016/01/20/django1/"/>
    <id>http://yoursite.com/2016/01/20/django1/</id>
    <published>2016-01-20T12:22:33.000Z</published>
    <updated>2016-04-13T05:29:03.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Django_Template的if标签">Django Template的if标签</h3><p>在Django的早期版本中，if标签的功能不是太强，只能检查一个变量是否为真（即，变量存在，非空，不是布尔值假），不支持==、!=、&gt;、&gt;=、&lt;、&lt;=等比较。如果要比较两个值是否相等，就要使用ifequal标签。<br>在Django模板系统中，以下这些对象相当于布尔值的False<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">空列表（[]）</span><br><span class="line">空元组（()）</span><br><span class="line">空字典（<span class="list">&#123;&#125;</span>）</span><br><span class="line">空字符串（<span class="string">''</span>）</span><br><span class="line">零值(<span class="number">0</span>)</span><br><span class="line">特殊对象<span class="keyword">None</span></span><br><span class="line">对象<span class="keyword">False</span></span><br></pre></td></tr></table></figure></p>
<p>除这些之外都被视为True。if标签还接受and、or和not来对多个变量做判断，但是and和or不能混用，因为可能会造成逻辑混乱，因为if标签不支持通过()来改变运算优先级。<br>不过在较高版本的Django中，这些都得到了不同程度的改善。例如：1. 支持==、&gt;这些运算符来对两个对象进行比较；2. and和or可以混用，但是注意一点，and运算的优先级更高。不过由于if标签还是不支持()，所以还是尽量把运算放在后端而不要混用and和or。</p>
<h3 id="Django_Template中的变量">Django Template中的变量</h3><p>在Django Template中，我们通过上下文传入的变量，但是变量调用方法时会受到一定的限制，变量只能调用无参的方法，如一个str对象，它只能调用如upper之类的无参对象，调用方式如下：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="expansion">&#123;&#123; string.upper &#125;&#125;</span> <span class="comment"># correct</span></span><br><span class="line"><span class="expansion">&#123;&#123; string.upper() &#125;&#125;</span> <span class="comment">#error</span></span><br><span class="line"><span class="expansion">&#123;&#123; string.index(<span class="string">'a'</span>) &#125;&#125;</span> <span class="comment">#error</span></span><br><span class="line"><span class="expansion">&#123;&#123; string[<span class="number">0</span><span class="symbol">:-</span><span class="number">1</span>]&#125;&#125;</span> <span class="comment">#error</span></span><br></pre></td></tr></table></figure></p>
<p>对于一个可索引对象，如list、set、dict等，我们在Template中可以通过以下方式获得其中的指定对象：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="expansion">&#123;&#123; list.<span class="number">0</span> &#125;&#125;</span> <span class="comment"># list[0]</span></span><br><span class="line"><span class="expansion">&#123;&#123; set.<span class="number">0</span> &#125;&#125;</span> <span class="comment"># set[0]</span></span><br><span class="line"><span class="expansion">&#123;&#123; dict.a &#125;&#125;</span> <span class="comment"># dict['a']</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Django_Template自定义过滤器">Django Template自定义过滤器</h3><p>Django利用过滤器大大强化了Template的功能，在Template利用管道符<code>|</code>来调用，调用的一般形式如下：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="expansion">&#123;&#123; value | filter &#125;&#125;</span> <span class="comment"># 没有额外的参数</span></span><br><span class="line"><span class="expansion">&#123;&#123; value | filter <span class="symbol">:</span> arg &#125;&#125;</span> <span class="comment">#带有一个额外的参数</span></span><br></pre></td></tr></table></figure></p>
<p>其中，<code>value</code>是变量，<code>arg</code>为选项值<br>不过在很多情况下，我们需要自定义一些过滤器，我们在我们的一个app目录建立templatetags/在此目录下建立空文件<strong>init</strong>.py和myfilter.py，首先插入几行代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from django import <span class="keyword">template</span></span><br><span class="line"><span class="keyword">register</span> = <span class="keyword">template</span>.Library()</span><br></pre></td></tr></table></figure></p>
<p>其中<code>register</code>是用来注册过滤器的，过滤器函数必须要返回一些信息，即使出错，也要返回空字符串或者默认值，过滤器分为有参和无参两种：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(value, arg)</span>:</span></span><br><span class="line">    <span class="comment"># 移除字符串中value的arg字串</span></span><br><span class="line">    <span class="keyword">return</span> value.replace(arg, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lower</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="comment"># 将字符串value转为小写字母</span></span><br><span class="line">    <span class="keyword">return</span> value.lower()</span><br></pre></td></tr></table></figure>
<p>接下去的我们我们要注册自定义的过滤器：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一个参数是在模板中使用的过滤器的名字</span></span><br><span class="line"><span class="comment"># 第二个就是你的过滤器函数引用名</span></span><br><span class="line">register.<span class="built_in">filter</span>(<span class="string">'remove'</span>, remove)</span><br><span class="line">register.<span class="built_in">filter</span>(<span class="string">'lower'</span>, <span class="built_in">lower</span>)</span><br></pre></td></tr></table></figure>
<p>在Python2.4以上的版本中，可以使用装饰器来注册：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@register.filter(name='remove')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(value, arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> value.replace(arg, <span class="string">''</span>)</span><br><span class="line"><span class="decorator">@register.filter # 使用函数名作为过滤器名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lower</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> value.lower()</span><br></pre></td></tr></table></figure>
<p>如果要指定传入的value的类型，也可以使用装饰器：</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template.defaultfilters <span class="keyword">import</span> stringfilter</span><br><span class="line"><span class="property">@stringfilter</span>  <span class="comment"># 希望字符串作为参数</span></span><br></pre></td></tr></table></figure>
<p>最终，完整的代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> template</span><br><span class="line"><span class="keyword">from</span> django.template.defaultfilters <span class="keyword">import</span> stringfilter</span><br><span class="line"></span><br><span class="line">register = template.Library()</span><br><span class="line"></span><br><span class="line"><span class="decorator">@register.filter(name='remove')</span></span><br><span class="line"><span class="decorator">@stringfilter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(value, arg)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> value.replace(arg, <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"><span class="decorator">@register.filter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lower</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> value.lower()</span><br></pre></td></tr></table></figure>
<p>然而我们在Template中使用自定义的过滤器时，要先加这一段代码：<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template_tag">&#123;% <span class="keyword">load</span> myfilter %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p>
<h3 id="Django_Template自定义标签">Django Template自定义标签</h3><p>Django中的自定义标签要比自定义过滤器复杂不少，在开始之前，我们先大概了解下Django Template的编译过程，当Django去编译一个Template时，它会把内容转成一个个django.template.Node实例，每个实例都有一个render方法，因此一个Template可以看做是一个Node的列表。当一个模板被渲染时，Template中Node实例的render方法会被调用，最终的返回会被合并。所以我们自定义标签就需要去实现我们自己的Node类和render方法。<br>我们动手来写一个标签，调用方式如下：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% current_time <span class="string">"<span class="variable">%Y</span>-<span class="variable">%m</span>-<span class="variable">%D</span> <span class="variable">%I</span>:<span class="variable">%M</span> <span class="variable">%p</span>"</span> <span class="variable">%&#125;</span></span><br></pre></td></tr></table></figure>
<p>首先还是要写这几句代码用来注册（我们把这部分代码放入自定义myfilter.py中，这两行就可以省略了）：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from django import <span class="keyword">template</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">register</span> = <span class="keyword">template</span>.Library()</span><br></pre></td></tr></table></figure>
<p>我们定义一个Node类：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CurrentTimeNode</span><span class="params">(template.Node)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, format_string)</span>:</span></span><br><span class="line">        self.format_string = str(format_string)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">render</span><span class="params">(self, context)</span>:</span></span><br><span class="line">        now = datetime.datetime.now()</span><br><span class="line">        <span class="comment"># 返回的是格式化后的时间字符串</span></span><br><span class="line">        <span class="keyword">return</span> now.strftime(self.format_string)</span><br></pre></td></tr></table></figure>
<p>然后定义一个编译函数用来创建Node实例：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_current_time</span><span class="params">(parser, token)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tag_name, format_string = token.split_contents()</span><br><span class="line">    <span class="comment"># tag_name = 'current_time'</span></span><br><span class="line">    <span class="comment"># format_string = '"%Y-%m-%D %I:%M %p"'</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        msg = <span class="string">'%r tag requires a single argument'</span> % token.split_contents()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">raise</span> template.TemplateSyntaxError(msg)</span><br><span class="line">    <span class="keyword">return</span> CurrentTimeNode(format_string[<span class="number">1</span>:-<span class="number">1</span>]) <span class="comment"># 去除两个'"'</span></span><br></pre></td></tr></table></figure>
<p>每一个标签的编译函数都需要parser和token两个函数，parser是模板分析对象，token为分析后的内容，可以直接使用。token.contents为标签的内容，token.split_contents会按空格分割token的内容，返回一个tuple，不过会保留‘“’，使用时要注意。其中token.split_contents()[0]可以得到标签名。</p>
<p>然后我们要注册一下标签：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@register.<span class="function"><span class="title">tag</span><span class="params">(name=<span class="string">"current_time"</span>)</span></span> 仅限Python2.<span class="number">4</span>以上</span><br><span class="line"></span><br><span class="line">register.<span class="function"><span class="title">tag</span><span class="params">(<span class="string">'current_time'</span>, do_current_time)</span></span></span><br></pre></td></tr></table></figure>
<p>Template中使用时依然要加上：</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template_tag">&#123;% <span class="keyword">load</span> myfilter %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<p>自定义标签还有一些更高级的用法，我们在后续的blog中再讲。。</p>
<h3 id="参考">参考</h3><p>官方文档：<a href="https://docs.djangoproject.com/en/1.9/howto/custom-template-tags/" target="_blank" rel="external">https://docs.djangoproject.com/en/1.9/howto/custom-template-tags/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Django_Template的if标签">Django Template的if标签</h3><p>在Django的早期版本中，if标签的功能不是太强，只能检查一个变量是否为真（即，变量存在，非空，不是布尔值假），不支持==、!=、&gt;、&gt;=、&lt;、]]>
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[echarts配置方法]]></title>
    <link href="http://yoursite.com/2015/11/27/echarts1/"/>
    <id>http://yoursite.com/2015/11/27/echarts1/</id>
    <published>2015-11-27T12:09:49.000Z</published>
    <updated>2015-11-28T13:07:24.000Z</updated>
    <content type="html"><![CDATA[<p>好久没来更新博客~忙死忙死……最近稍微有点空了补更补更~~😊😊</p>
<p>最近在研究echarts，发现网上的配置帖中的配置方法有点过时，所以我也来写一篇，记录下echarts的配置方法。</p>
<p>首先去百度echarts官网下载echarts，解压后找到以下几个文件和文件夹：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echarts-<span class="number">2.2</span><span class="number">.7</span>/build/dist/echarts.js</span><br><span class="line">echarts-<span class="number">2.2</span><span class="number">.7</span>/build/dist/chart</span><br><span class="line">echarts-<span class="number">2.2</span><span class="number">.7</span>/doc/example/theme</span><br><span class="line">echarts-<span class="number">2.2</span><span class="number">.7</span>/doc/asset/js/echartsConfig.js</span><br></pre></td></tr></table></figure>
<p>将这些文件和文件放入一个文件夹作为echarts包（我将其命名为echarts，本文中讲到的echarts就是指这个包），我们新建一个工程，结构如下：</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">demo</span><br><span class="line">   <span class="string">|--demo.html</span></span><br><span class="line">   <span class="string">|--js</span></span><br><span class="line">      <span class="string">|--echarts</span></span><br></pre></td></tr></table></figure>
<p>接下来，重头戏来了，小二，上代码~~  来了您呐~~<br><a href="/projects/echartsDemos/demo1.html" target="_blank" style="font-size:9pt"><code>代码预览点这里</code></a></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>ECharts-基本线性图及其配置要求<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"main"</span> <span class="attribute">style</span>=<span class="value">"height: 400px; width:800px; border-radius: 10px; padding: 10px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"./js/echarts/echarts.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"http://code.jquery.com/jquery-1.11.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">language</span>=<span class="value">"javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">        <span class="built_in">require</span>.config(&#123;</span><br><span class="line">            paths: &#123;</span><br><span class="line">                 echarts: <span class="string">'./js/echarts'</span>, <span class="comment">//echarts包的路径</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">        <span class="built_in">require</span>(</span><br><span class="line">            [</span><br><span class="line">            <span class="string">'echarts'</span>,</span><br><span class="line">            <span class="string">'echarts/theme/dark'</span>, <span class="comment">//需要使用的theme，如果不需要可以省略</span></span><br><span class="line">            <span class="string">'echarts/chart/line'</span>, <span class="comment">//需要引入的表格类型</span></span><br><span class="line">            <span class="string">'echarts/chart/bar'</span> <span class="comment">//同上</span></span><br><span class="line">            ],</span><br><span class="line">        <span class="comment">//回调函数</span></span><br><span class="line">        <span class="comment">//渲染ECharts图表</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">ec,theme</span>) </span>&#123;  <span class="comment">//如不使用theme，可以省略theme参数，ec.init也可以省略</span></span><br><span class="line">            <span class="comment">//图表渲染的容器对象</span></span><br><span class="line">            <span class="keyword">var</span> chartContainer = <span class="built_in">document</span>.getElementById(<span class="string">"main"</span>);</span><br><span class="line">            <span class="comment">//加载图表</span></span><br><span class="line">            <span class="keyword">var</span> myChart = ec.init(chartContainer,theme);</span><br><span class="line">            option = &#123;</span><br><span class="line">                title: &#123;</span><br><span class="line">                    text: <span class="string">'echarts-基本线性图'</span>,</span><br><span class="line">                    x: <span class="string">'center'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                tooltip: &#123;</span><br><span class="line">                    trigger: <span class="string">'axis'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line">                    y: <span class="string">'bottom'</span>,</span><br><span class="line">                    data:[<span class="string">'邮件营销'</span>,<span class="string">'联盟广告'</span>,<span class="string">'视频广告'</span>,<span class="string">'直接访问'</span>,<span class="string">'搜索引擎'</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                toolbox: &#123;</span><br><span class="line">                    show: <span class="literal">true</span>,</span><br><span class="line">                    x: <span class="string">'right'</span>,</span><br><span class="line">                    orient: <span class="string">'vertical'</span>,</span><br><span class="line">                    feature: &#123;</span><br><span class="line">                        mark: &#123;show: <span class="literal">true</span>&#125;,</span><br><span class="line">                        dataView: &#123;show: <span class="literal">true</span>, readOnly: <span class="literal">false</span>&#125;,</span><br><span class="line">                        magicType: &#123;show: <span class="literal">true</span>, type: [<span class="string">'line'</span>, <span class="string">'bar'</span>, <span class="string">'stack'</span>, <span class="string">'tiled'</span>]&#125;,</span><br><span class="line">                        restore: &#123;show: <span class="literal">true</span>&#125;,</span><br><span class="line">                        saveAsImage: &#123;show: <span class="literal">true</span>&#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                calculable: <span class="literal">true</span>,</span><br><span class="line">                xAxis: [</span><br><span class="line">                &#123;</span><br><span class="line">                    type: <span class="string">'category'</span>,</span><br><span class="line">                    boundaryGap: <span class="literal">false</span>,</span><br><span class="line">                    data: [<span class="string">'周一'</span>,<span class="string">'周二'</span>,<span class="string">'周三'</span>,<span class="string">'周四'</span>,<span class="string">'周五'</span>,<span class="string">'周六'</span>,<span class="string">'周日'</span>]</span><br><span class="line">                &#125;</span><br><span class="line">                ],</span><br><span class="line">                yAxis: [</span><br><span class="line">                &#123;</span><br><span class="line">                    type: <span class="string">'value'</span></span><br><span class="line">                &#125;</span><br><span class="line">                ],</span><br><span class="line">                series: [</span><br><span class="line">                &#123;</span><br><span class="line">                    name:<span class="string">'邮件营销'</span>,</span><br><span class="line">                    type:<span class="string">'line'</span>,</span><br><span class="line">                    stack: <span class="string">'总量'</span>,</span><br><span class="line">                    data:[<span class="number">120</span>, <span class="number">132</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    name:<span class="string">'联盟广告'</span>,</span><br><span class="line">                    type:<span class="string">'line'</span>,</span><br><span class="line">                    stack: <span class="string">'总量'</span>,</span><br><span class="line">                    data:[<span class="number">220</span>, <span class="number">182</span>, <span class="number">191</span>, <span class="number">234</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    name:<span class="string">'视频广告'</span>,</span><br><span class="line">                    type:<span class="string">'line'</span>,</span><br><span class="line">                    stack: <span class="string">'总量'</span>,</span><br><span class="line">                    data:[<span class="number">150</span>, <span class="number">232</span>, <span class="number">201</span>, <span class="number">154</span>, <span class="number">190</span>, <span class="number">330</span>, <span class="number">410</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    name:<span class="string">'直接访问'</span>,</span><br><span class="line">                    type:<span class="string">'line'</span>,</span><br><span class="line">                    stack: <span class="string">'总量'</span>,</span><br><span class="line">                    data:[<span class="number">320</span>, <span class="number">332</span>, <span class="number">301</span>, <span class="number">334</span>, <span class="number">390</span>, <span class="number">330</span>, <span class="number">320</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    name:<span class="string">'搜索引擎'</span>,</span><br><span class="line">                    type:<span class="string">'line'</span>,</span><br><span class="line">                    stack: <span class="string">'总量'</span>,</span><br><span class="line">                    data:[<span class="number">820</span>, <span class="number">932</span>, <span class="number">901</span>, <span class="number">934</span>, <span class="number">1290</span>, <span class="number">1330</span>, <span class="number">1320</span>]</span><br><span class="line">                &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;;</span><br><span class="line">            myChart.setOption(option);</span><br><span class="line">        &#125;);</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> marginWidth = $(<span class="string">'body'</span>).width() - $(<span class="string">'#main'</span>).width();</span><br><span class="line">            <span class="keyword">var</span> marginLeft = marginWidth / <span class="number">2</span>;</span><br><span class="line">            $(<span class="string">'#main'</span>).css(<span class="string">'margin-left'</span>, marginLeft);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意，代码中的<code>echarts: &#39;./js/echarts&#39;</code>指的是echarts包所在的位置，而<code>[&#39;echarts&#39;,&#39;echarts/theme/dark&#39;, &#39;echarts/chart/line&#39;]</code>中的echarts则是指引入包得变量名。在配置echarts中最重要的就是<code>option</code>了，<code>option</code>的中配置项可以查看<a href="http://echarts.baidu.com/doc/option.html" target="_blank" rel="external"><em>echarts配置项查找工具</em></a>。</p>
<p>好啦，今天就讲这么多~~ 下一次我们再来讲echarts点击事件~~ 拜拜，债见~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>好久没来更新博客~忙死忙死……最近稍微有点空了补更补更~~😊😊</p>
<p>最近在研究echarts，发现网上的配置帖中的配置方法有点过时，所以我也来写一篇，记录下echarts的配置方法。</p>
<p>首先去百度echarts官网下载echarts，解压后找到以下]]>
    </summary>
    
      <category term="echarts" scheme="http://yoursite.com/tags/echarts/"/>
    
      <category term="echarts" scheme="http://yoursite.com/categories/echarts/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript闭包之个人拙见]]></title>
    <link href="http://yoursite.com/2015/10/16/JS-bibao-2015-10-16/"/>
    <id>http://yoursite.com/2015/10/16/JS-bibao-2015-10-16/</id>
    <published>2015-10-16T01:41:23.000Z</published>
    <updated>2015-10-16T14:54:51.000Z</updated>
    <content type="html"><![CDATA[<p>昨天研究了一下JS的闭包机制，大概整理了一下，记录在此，做个备忘。</p>
<p>首先，JS闭包的理解难点也是其特点在于，它可以把函数体内的局部变量维持住，使得在函数作用域外也能访问到。这和<em>C</em>和<em>Java</em>等静态语言的机制是很不一样的。</p>
<p>我们先来一个简单的例子：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>; <span class="comment">// 全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> scope = <span class="string">"local scope"</span>; <span class="comment">// 局部变量</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> scope;&#125; <span class="comment">// 在作用域内返回这个值</span></span><br><span class="line">	<span class="keyword">return</span> f; <span class="comment">// 如果返回的是f()，结果会是神马？</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkscope()(); <span class="comment">// "local scope"</span></span><br></pre></td></tr></table></figure>
<p>在这个例子，一个明显的特点就是返回值是一个函数对象，而令人费解的是，<code>var scope = &quot;local scope&quot;;</code>的作用域应该在函数<code>checkscope()</code>内，而当语句<code>checkscope()()</code>执行时，实际上执行的是<code>checkscope()</code>返回的函数对象，这已经超出了局部变量<code>scope</code>的作用域，而我们却依然取到了它的值，这就是闭包的强大之处了。</p>
<p>当然，也许我们可以认为，我们得到的只是<code>scope</code>的静态快照(<em>static snapshot</em>)。事实真是如此吗，我们一会给个例子来找出这个答案，不过在此之前，我们先讲讲多闭包共享变量，先上例子：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		count: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> n++;&#125;,</span><br><span class="line">		reset: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; n = <span class="number">0</span>;&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = counter();</span><br><span class="line">c.count(); <span class="comment">// =&gt; 0</span></span><br><span class="line">c.reset(); <span class="comment">// reset()和count()共享了变量状态</span></span><br><span class="line">c.count(); <span class="comment">// =&gt; 0: 已经被重置了</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，counter()返回了一个“计数器”对象，里面包含两个方法：count()和reset()，这两个方法共享私有变量n。</p>
<p>有了上面那个例子做铺垫，那我们再来解决之前的那个问题，在这个例子中，函数将会创建多个闭包：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">constfuncs</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> funcs = [];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> ;i++)</span><br><span class="line">		funcs[i] = =<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> i;&#125;</span><br><span class="line">	<span class="keyword">return</span> funcs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcs = constfuncs();</span><br><span class="line">funcs[<span class="number">5</span>](); <span class="comment">// 结果会是神马</span></span><br></pre></td></tr></table></figure>
<p>我想大多数盆友会认为结果是5，好吧，我承认我一开始也是这么想的😂。然而结果是10，这大大出乎了我们的预料，其实这个答案也很容易理解，函数返回的多个闭包共享了变量<code>i</code>的状态，而不是各自将其复制一份，也不会对其生成静态快照。</p>
<p>再来讲一个闭包的特殊用途——共享私有状态：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function counter(<span class="keyword">n</span>)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		get <span class="keyword">count</span>() &#123; <span class="keyword">return</span> <span class="keyword">n</span>++;&#125;,</span><br><span class="line">		<span class="keyword">set</span> <span class="keyword">count</span>(<span class="keyword">m</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">m</span> &gt; <span class="keyword">n</span>) <span class="keyword">n</span> = <span class="keyword">m</span>;</span><br><span class="line">			<span class="keyword">else</span> throw <span class="keyword">Error</span>(<span class="string">"count can only be set to a larger value"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c = counter(1000);</span><br><span class="line">c.<span class="keyword">count</span> <span class="comment">// =&gt; 1000</span></span><br><span class="line">c.<span class="keyword">count</span> <span class="comment">// =&gt; 1001</span></span><br><span class="line">c.<span class="keyword">count</span> = 2000 </span><br><span class="line">c.<span class="keyword">count</span> <span class="comment">// =&gt; 2000</span></span><br><span class="line">c.<span class="keyword">count</span> = 2000 <span class="comment">// =&gt; Error</span></span><br></pre></td></tr></table></figure>
<p>这个函数没有声明局部变量而是使用参数n来保存私有状态，属性存取器方法可以访问n，而调用counter()可以指定私有变量的初始值。</p>
<p>我的第一篇技术博客就到此为止了，这篇博客在高亮上貌似遇到了点麻烦…………我也不知道该怎么搞了😰</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>昨天研究了一下JS的闭包机制，大概整理了一下，记录在此，做个备忘。</p>
<p>首先，JS闭包的理解难点也是其特点在于，它可以把函数体内的局部变量维持住，使得在函数作用域外也能访问到。这和<em>C</em>和<em>Java</em>等静态语言的机制是很不一样的。</p]]>
    </summary>
    
      <category term="JavaScript闭包" scheme="http://yoursite.com/tags/JavaScript%E9%97%AD%E5%8C%85/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的第一篇Blog]]></title>
    <link href="http://yoursite.com/2015/10/15/my-first-post/"/>
    <id>http://yoursite.com/2015/10/15/my-first-post/</id>
    <published>2015-10-14T23:56:29.000Z</published>
    <updated>2015-10-15T09:00:21.000Z</updated>
    <content type="html"><![CDATA[<p>花了两天不到的时间终于弄好了我的技术博客，挂到了<em>github</em>上面。回想一下，第一次产生做技术博客的想法还是在四月份，过了大半年才完成，真是惭愧了。</p>
<p>来到南大也有一个多月了（虽然给学校的干活的时间远长于此😓），却仍然还没上过一堂课（老师，请收下我的膝盖😢）。不过想想软件工程的特（che）点（dan）不就在此吗😂。</p>
<p>好了，就写这么多了，回去干活啦😫~（<font color="#FF0000">所有人，都过来~回去干活</font>）</p>
<p>最后，为战歌默哀~永别了，奴隶战😔😔😔<br><img src="/images/nulizhan.jpg" alt="奴隶战"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>花了两天不到的时间终于弄好了我的技术博客，挂到了<em>github</em>上面。回想一下，第一次产生做技术博客的想法还是在四月份，过了大半年才完成，真是惭愧了。</p>
<p>来到南大也有一个多月了（虽然给学校的干活的时间远长于此😓），却仍然还没上过一堂课（老师，请收]]>
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
